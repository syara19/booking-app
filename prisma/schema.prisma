// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum UserRole {
  CUSTOMER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
}

enum RoomTypeEnum {
  STANDARD
  DELUXE
  SUITE
  FAMILY
}

model User {
  id        String    @id @default(uuid()) @map("id")
  username  String    @unique
  password  String
  email     String    @unique
  role      UserRole  @default(CUSTOMER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  customer  Customer?
  admin     Admin?    

  @@map("users")
}

model Customer {
  id          String    @id @default(uuid()) @map("id")
  userId      String    @unique 
  fullName    String?
  phoneNumber String?
  address     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id])
  bookings    Booking[]
  reviews     Review[]  

  @@map("customers")
}

model Admin {
  id          String    @id @default(uuid()) @map("id")
  userId      String    @unique 
  fullName    String?
  phoneNumber String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id])

  @@map("admins")
}

model Hotel {
  id           String    @id @default(uuid()) @map("id")
  name         String
  address      String
  city         String
  country      String    @default("Indonesia")
  imageUrl     String?   
  description  String?
  starRating   Decimal   @db.Decimal(2, 1)
  checkInTime  String  @map("check_in_time")
  checkOutTime String  @map("check_out_time")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  rooms        Room[]  

  @@map("hotels")
}



model Room {
  id          String    @id @default(uuid()) @map("id")
  hotelId     String
  roomNumber  String
  roomType    RoomTypeEnum
  pricePerNight Int     
  capacity    Int
  description String?
  isAvailable Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  hotel       Hotel    @relation(fields: [hotelId], references: [id],  onDelete: Cascade)
  bookings    Booking[]

  @@unique([hotelId, roomNumber])  
  @@map("rooms")
}

model Booking {
  id            String        @id @default(uuid()) @map("id")
  customerId    String
  roomId        String
  checkInDate   DateTime      @db.Date  
  checkOutDate  DateTime      @db.Date  
  totalPrice    Decimal       @db.Decimal(10, 2)
  bookingStatus BookingStatus @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  customer      Customer      @relation(fields: [customerId], references: [id])
  room          Room          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  payment       Payment?      
  review        Review?       
  @@map("bookings")
}

model Payment {
  id            String        @id @default(uuid()) @map("id")
  bookingId     String        @unique  
  amount        Decimal       @db.Decimal(10, 2)
  paymentMethod String?
  transactionId String?       @unique
  paymentDate   DateTime      @default(now())
  status        PaymentStatus @default(PENDING)  

  booking       Booking       @relation(fields: [bookingId], references: [id])

  @@map("payments")
}

model Review {
  id          String   @id @default(uuid()) @map("id")
  bookingId   String   @unique  
  customerId  String
  rating      Int      
  comment     String?
  reviewDate  DateTime @default(now())

  booking     Booking  @relation(fields: [bookingId], references: [id])
  customer    Customer @relation(fields: [customerId], references: [id])

  @@map("reviews")
}